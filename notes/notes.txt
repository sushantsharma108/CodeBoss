a. Controllers: In an express app , a controller refers to the part of your code that is responsible for handling the app's logic. Controllers are typically used to process incoming requests, interact with models(data sources) and send responses back to the clients. They help organize your application by separating concerns and following the MVC(Model View Controller) design pattern.

1 => action: "action" is the description of what you want to do , while "dispatch" is the function that carries out that action.

2 => controllers me async logic likhte hain to try catch use karna chahiye, otherwise we can use the express sync package.

3 => jo bhi variable controller.js me banayenge unhe import ya require kar sakte hain auth-router.js me and code aur bgi chhota ho jata hai bcz just likhna hota h--> router.route("/").get(home);

4 => Jab data ko add karna ho DB me tab POST req karo aur saath me res.status(code).json({message:"message likho yaha par});
5 => app.use(express.json());
// the below code is known as Mounting the router: To use the router in your main express app, you can mount it at a specific URL prefix
app.use("/api/auth", router);
// if we're using the above line of code then we don't need to use the below app.get routes.
// application will use the defined router above and will directly go to the auth-router file on execution

// app.get('/', (req, res) => {
//     res.status(200).send('Hello, We are going to learn the MERN Stack and hum usme fod denge!!!...');
// });
// app.get('/login', (req, res) => {
//     res.status(200).send('Hello, We are going to login into platform...');
// });
______________________________________________

**USER SCHEMA & MODEL**

1. SCHEMA: Defines the structure of the documents within a collection. It specifies the fields, their types and additional constraints or validations.
2. MODEL: Acts as a higher level abstraction that interacts with the database based on the defined schema.It represents a collection & provides an interface for querying, creating, updating & deleting documents in that collection. Models are created from schemas & enable you to work with MongoDB data in a more structured manner in your application. 